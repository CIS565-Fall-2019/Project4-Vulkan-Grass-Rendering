#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer Blades {
	  Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

  Blade thisblade = blades[gl_GlobalInvocationID.x];

  vec3 v0 = thisblade.v0.xyz;
  vec3 v1 = thisblade.v1.xyz;
  vec3 v2 = thisblade.v2.xyz;
  vec3 up = thisblade.up.xyz;
  vec4 v0h = vec4(v0, 1);
  vec4 v2h = vec4(v2, 1);
  vec4 uph = vec4(up, 1);
  float orientation = thisblade.v0.w;
  float height = thisblade.v1.w;
  float width = thisblade.v2.w;
  float stiffness = thisblade.up.w;
  vec3 ori = vec3(cos(orientation), 0, sin(orientation));
  mat4 VP = camera.proj * camera.view;

  /* ----PHYSICAL---- */

  // Gravity
  vec3 f = normalize(cross(up, ori));
  vec3 gE = vec3(0, -9.8, 0);
  vec3 gF = 0.2 * length(gE) * f;
  vec3 gravity = gE + gF;

  // Recovery
  vec3 I_v2 = v0 + height * up;
  vec3 recovery = (I_v2 - v2) * stiffness;

  // Wind Function
//  vec3 w_i = vec3(sin(totalTime), 0, cos(totalTime));
  vec3 w_i = vec3(sin(totalTime), 0, cos(totalTime));
  
  // Wind
  float f_d = 1 - abs(length(w_i) * length(v2 - v0));
  float f_r = dot(v2 - v0, up) / height;
  vec3 wind = w_i * f_d * f_r;

  // Translate v2
  vec3 tv2 = (gravity + recovery + wind) * deltaTime;
  v2 = thisblade.v2.xyz + tv2;

  // State Validation
  v2 = v2 - up * min(up * (v2 - v0), 0);
  float l_proj = length(v2 - v0 - up * ((v2 - v0) * up));
  v1 = v0 + height * up * max(1 - (l_proj / height), 0.05 * max(l_proj / height, 1));
  float L0 = length(v2 - v0);
  float L1 = length(v2 - v1) + length(v1 - v0);
  float L = (2 * L0 + L1) / 3.0;
  float ratio = height / L;
  vec3 v1_corr = v0 + ratio * (v1 - v0);
  vec3 v2_corr = v1_corr + ratio * (v2 - v1);
  v1 = v1_corr;
  v2 = v2_corr;

  // Update this blade
  thisblade.v1.xyz = v1;
  thisblade.v2.xyz = v2;
  blades[gl_GlobalInvocationID.x] = thisblade;

	/* ----CULLING---- */
  const bool ORIENTATION_ENABLE = false;
  const bool VIEW_FRUSTUM_ENABLE = false;
  const bool DISTANCE_ENABLE = false;
  
  // Orientation Test
  if (ORIENTATION_ENABLE) {
    vec3 dir_c = normalize((inverse(camera.proj * camera.view) * vec4(0, 0, 1, 0)).xyz);
    vec3 dir_b = normalize(ori);
    if (abs(dot(dir_c, dir_b)) > 0.9) {
      return;
    }
  }

  // View-frustum Test
  if (VIEW_FRUSTUM_ENABLE) {
    vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
    vec4 mh = vec4(m, 1);

    vec4 v0h_prime = VP * v0h;
    vec4 v2h_prime = VP * v2h;
    vec4 mh_prime = VP * mh;

    float h_v0 = v0h_prime.w + 0.1;
    float h_v2 = v2h_prime.w + 0.1;
    float h_m = mh_prime.w + 0.1;

    bool v0_inbounds = (inBounds(v0h_prime.x, h_v0) && inBounds(v0h_prime.y, h_v0) && inBounds(v0h_prime.z, h_v0));
    bool v2_inbounds = (inBounds(v2h_prime.x, h_v2) && inBounds(v2h_prime.y, h_v2) && inBounds(v2h_prime.z, h_v2));
    bool m_inbounds = (inBounds(mh_prime.x, h_m) && inBounds(mh_prime.y, h_m) && inBounds(mh_prime.z, h_m));
    if ( !v0_inbounds && !v2_inbounds && !m_inbounds) {
      return;
    }
  }

  // Distance Test
  if (DISTANCE_ENABLE) {
    const float MAX_DISTANCE = 20.0;
    const int N_BUCKETS = 2;

    bool culled_by_distance = false;
    vec3 v0_proj = (camera.view * v0h).xyz / (camera.view * v0h).w;
    vec3 up_proj = normalize((camera.view * uph).xyz);
    float d_proj = length(v0_proj);
    if (d_proj > MAX_DISTANCE) culled_by_distance = true;
    if (!culled_by_distance) {
      if (gl_GlobalInvocationID.x % N_BUCKETS > N_BUCKETS * (1 - (d_proj / MAX_DISTANCE))) {
        culled_by_distance = true;
      }
    }
    if (culled_by_distance) {
      return;
    }
  }


  culledBlades[atomicAdd(numBlades.vertexCount, 1)] = thisblade;
}
