#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer InputBlades {
	Blade inputBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
} numBlades;



// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		 numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point
	numBlades.vertexCount = atomicAdd(numBlades.vertexCount, 1);
	numBlades.instanceCount = 1;
	numBlades.firstVertex = 0;
	numBlades.firstInstance = 0;

//	vec4 v0 = inputBlades[gl_GlobalInvocationID.x].v0;
//	vec4 v1 = inputBlades[gl_GlobalInvocationID.x].v1;
//	vec4 v2 = inputBlades[gl_GlobalInvocationID.x].v2;
//	vec4 up = inputBlades[gl_GlobalInvocationID.x].up;
//
//	vec3 D = vec3(0.0, -1.0, 0.0);
//	float gMag = 9.8;
//	vec3 gE = normalize(D) * gMag;
//	vec3 f = normalize(vec3(cos(v0.w), 0.f, sin(v0.w)));
//	vec3 gF = (1.f/4.f) * length(gE) * f;
//	vec3 g = gE + gF;
//
//	vec3 iv2 = v0.xyz + v1.w * up.xyz;
//	vec3 r = (iv2 - v2.xyz) * up.w;
//
//	vec3 tv2 = (g + r) * deltaTime;
//
//	v2 += vec4(tv2, 0.f);
//
//	v2.xyz = v2.xyz - up.xyz * min(up.xyz * (v2.xyz - v0.xyz), 0.f);
//
//	float lproj = length(v2.xyz - v0.xyz - up.xyz * ((v2.xyz - v0.xyz) * up.xyz));
//
//	v1.xyz = v0.xyz + v1.w * up.xyz * max(1 - lproj/v1.w, 0.05 * max(lproj/v1.w, 1.f));
//
//	float L = (2 * length(v0.xyz) + (3 - 1) * length(v1.xyz)) / (3 + 1);
//
//	float rfloat = v1.w / L;
//	inputBlades[gl_GlobalInvocationID.x].v1 = vec4(v0.xyz + r * (v1.xyz - v0.xyz), v1.w);
//	inputBlades[gl_GlobalInvocationID.x].v2 = vec4(inputBlades[gl_GlobalInvocationID.x].v1.xyz + r * (v2.xyz - v1.xyz), v2.w);

	inputBlades[gl_GlobalInvocationID.x] = Blade(vec4(1.0), vec4(1.0), vec4(1.0), vec4(1.0));	

	culledBlades[gl_GlobalInvocationID.x] = inputBlades[gl_GlobalInvocationID.x];


    // TODO: Apply forces on every blade and update the vertices in the buffer

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
