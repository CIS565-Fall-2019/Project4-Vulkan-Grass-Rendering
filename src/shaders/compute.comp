#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
layout(set = 2, binding = 0) buffer inputBlades {
	Blade b[];
};
// 2. Write out the culled blades
layout(set = 2, binding = 1) buffer culledBlades {
	Blade c[];
};
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
 layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
 	  uint firstInstance; // = 0
 } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	float orientation = b[gl_GlobalInvocationID.x].v0.w;
	float height = b[gl_GlobalInvocationID.x].v1.w;
	float width = b[gl_GlobalInvocationID.x].v2.w;
	float stiffness = b[gl_GlobalInvocationID.x].up.w;
	vec3 v0 = b[gl_GlobalInvocationID.x].v0.xyz;
	vec3 v1 = b[gl_GlobalInvocationID.x].v1.xyz;
	vec3 v2 = b[gl_GlobalInvocationID.x].v2.xyz;
	vec3 up = b[gl_GlobalInvocationID.x].up.xyz;

	vec3 dir = normalize(vec3(cos(orientation), 0, sin(orientation)));
	vec3 f = cross(dir, up);
	float gravityStrength = 9.8f;
	vec3 g = gravityStrength * vec3(0, -1, 0) + gravityStrength * 0.25f * f;

	vec3 iv2 = v0 + up * height;
	vec3 r = (iv2 - v2) * stiffness;

	vec3 wind = vec3(5 * sin((v0.x + totalTime) * 0.35) * sin((v0.z + totalTime) * 0.4), 0, 0);
	float fd = 1.f - abs(dot(normalize(wind), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / height;
	float windAlignment = fd * fr;
	vec3 w = wind * fd * fr;

	vec3 tv2 = (g + r + w) * deltaTime;
	v2 += tv2;
	v2 = v2 - up * min(dot(up, (v2 - v0)), 0);
	float lproj = length(v2 - v0 - up * dot((v2 - v0), up));
	v1 = v0 + height * up * max(1 - lproj / height, 0.05 * max(lproj / height, 1));
	float L0 = length(v2 - v0);
	float L1 = length(v1 - v0) + length(v2 - v1);
	float L = (2 * L0 + (3 - 1) * L1) / (3 + 1);
	float ratio = height / L;
	vec3 v1corr = v0 + ratio * (v1 - v0);
	vec3 v2corr = v1corr + ratio * (v2 - v1);
	b[gl_GlobalInvocationID.x].v2 = vec4(v2corr, width);
	b[gl_GlobalInvocationID.x].v1 = vec4(v1corr, height);
	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	bool flag = true;
	vec3 cameraDir = vec3(inverse(camera.view) * vec4(0, 0, -1, 0));
	cameraDir = normalize(vec3(cameraDir.x, 0, cameraDir.z));
	if (abs(dot(cameraDir, f)) < 0.1) {
		flag = false;
	}
	if (flag) {
		float maxDist = 60;
		int numBuckets = 10;
		vec3 eye = vec3(inverse(camera.view) * vec4(0, 0, 0, 1));
		float MIN_HEIGHT = 1.3f; // Copied from Blades.h
		float MAX_HEIGHT = 2.5f; // Copied from Blades.h
		float dist = length(eye - v0);
		for (int i = 0; i <= numBuckets; i++) {
			float bucketDist = maxDist / numBuckets;
			if (dist < bucketDist * i) {
				float rng = (height - MIN_HEIGHT) / (MAX_HEIGHT - MIN_HEIGHT);
				if (rng < float(i) / float(numBuckets)) {
					flag = false;
				}
				break;
			}
		}
		if (dist > maxDist) {
			flag = false;
		}
	}
	if (flag) {
		vec3 m = (1/4) * v0 * (1/2) * v1 * (1/4) * v2;
		vec3 v0Screen = vec3(vec4(v0, 1) * inverse(camera.view) * inverse(camera.proj));
		vec3 mScreen = vec3(vec4(m, 1) * inverse(camera.view) * inverse(camera.proj));
		vec3 v2Screen = vec3(vec4(v2, 1) * inverse(camera.view) * inverse(camera.proj));
		float frustumBounds = 1;
		if (
			(v0Screen.x < -frustumBounds || v0Screen.x > frustumBounds || v0Screen.y < -frustumBounds || v0Screen.y > frustumBounds)
			&& (mScreen.x < -frustumBounds || mScreen.x > frustumBounds || mScreen.y < -frustumBounds || mScreen.y > frustumBounds)
			&& (v2Screen.x < -frustumBounds || v2Screen.x > frustumBounds || v2Screen.y < -frustumBounds || v2Screen.y > frustumBounds)
		) {
			flag = false;
		}
	}
	if (flag) {
		uint prevIndex = atomicAdd(numBlades.vertexCount, 1);
		c[prevIndex] = b[gl_GlobalInvocationID.x];
	}
}