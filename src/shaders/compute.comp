#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
    Blade[] input_blades;
} blades;

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade[] output_blades;
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
   uint vertexCount;   // Write the number of blades remaining here
   uint instanceCount; // = 1
   uint firstVertex;   // = 0
   uint firstInstance; // = 0
} numBlades;

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
// The blade type is passed by the compute layer set
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
	   numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	//for testing
	//grab out the data
	Blade curr = blades.input_blades[gl_GlobalInvocationID.x];
	float angle = curr.v0.w;
	float height = curr.v1.w;
	float width = curr.v2.w;
	float stiffness = curr.up.w;

	vec3 v0 = vec3(curr.v0.xyz);
	vec3 v1 = vec3(curr.v1.xyz);
	vec3 v2 = vec3(curr.v2.xyz);
	vec3 up = vec3(curr.up.xyz);

	//compute the front and width direction
	vec3 front_dir = normalize(vec3(cos(angle), 0.0, sin(angle)));
	vec3 width_dir = normalize(cross(up,front_dir));
	//compute gravity
	//assume the direction is toward (0, -1 , 0) globally
	vec4 gravity = vec4(0,-1,0,1);
	vec3 gE = normalize(gravity.xyz) * gravity.w;
	vec3 gF = 0.25 * abs(gE) * front_dir;
	vec3 g_total = gE + gF;

	//compute recovery
	vec3 iv2 = height * up + v0;
	vec3 recovery = (iv2 - v2) * stiffness;

	//compute wind
	//a very naive wind force function based on v0
	//vec3 wi = vec3(cos(v0.x), 0, sin(v0.z));
    vec3 wi = vec3(cos(totalTime + v0.x * 0.2 + v0.z * 0.3) * 3, 0, 0);
	//vec3 wi = vec3(2,0,2);
	//directional alignment
	float fd = 1 - dot(normalize(wi), normalize(v2 - v0));
	//height ratio
	float fh = dot(normalize(up), normalize(v2 - v0)) / height;
	vec3 wind = wi * fd * fh;
	//apply to v2
	v2 += (g_total + recovery + wind) * deltaTime;



	//we need to validate the new pos of v2, update v1 and recalculate the length of bezier
	
	//v2 above group validation
	v2 = v2 - up * min(dot(up,(v2-v0)), 0);

	//v1 recompute
	float l_proj = length(v2 - v0 - up * dot((v2 - v0),up));
	v1 = v0 + height * up * max( ( 1 - l_proj / height), 0.05 * max(l_proj/height,1)); //not equal to v0

	//ensure the length of bezier is correct
	//not quite sure about the L
	//L0 distance between v0 and v2
	float L0 = length(v2 - v0);
	//L1 sum of v0 to v1 and v1 to v2;
	float L1 = length(v1 - v0) + length(v2 - v1);
	//assume we are 2 degree bezier
	float L = (2 * L0 + (3 - 1) * L1) / (3 +1);
	float r = height / L;

	//modify the v1 and v2 to the new appropriate position which have the same length as before
	v1 = v0 + r * (v1 - v0);
	v2 = v1 + r * (v2 - v1);

	//v1 and v2 has been updated -- ready to cull

	//direction cull -- question how to get the orientation of camera from view matrix?
	//get the camera orientation by view matrix
	vec3 camera_orientation = vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]);
	float dir_cull_thred = 0.9;
	if(abs(dot(camera_orientation,width_dir)) > dir_cull_thred)
	{
		return;
	}


	//view-frustum culling -- q: in curr.v0 v1 the last value is a real value, not 1, do we need to reconstruct to (v0.xyz,1) form?  -- I think we need
	//compute m
	vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2;
	//reconstruct v0, m and v2
	vec4 v0_culling = vec4(v0,1.0);
	vec4 m_culling = vec4(m,1.0);
	vec4 v2_culling = vec4(v2,1.0);

	v0_culling = camera.proj * camera.view * v0_culling;
	m_culling = camera.proj * camera.view * m_culling;
	v2_culling = camera.proj * camera.view * v2_culling;

	float tolerance = 0.05;
	float v0_thre = v0_culling.w + tolerance;
	float m_thre = m_culling.w + tolerance;
	float v2_thre = v2_culling.w + tolerance;

	bool v0_pass = inBounds(v0_culling.x, v0_thre) && inBounds(v0_culling.y, v0_thre) && inBounds(v0_culling.z, v0_thre);
	bool m_pass = inBounds(m_culling.x, m_thre) && inBounds(m_culling.y, m_thre) && inBounds(m_culling.z, m_thre);
	bool v2_pass = inBounds(v2_culling.x, v2_thre) && inBounds(v2_culling.y, v2_thre) && inBounds(v2_culling.z, v2_thre);

	//cull if all three are not passed
	if(!(v0_pass && m_pass && v2_pass))
	{
		return; 
	}

	//distance cull  -- how to get camera position form view matrix?
	// transform the v0 and up to camera space -- not work..
	vec3 v0_cam = vec3(camera.view * vec4(v0,1.0));
	vec3 up_cam = vec3(camera.view * vec4(up,0.0));
	//vec3 camera_pos = vec3(-camera.view[3][0], -camera.view[3][1], -camera.view[3][2]);
	//define dmax and n
	uint n = 8;
	float dmax = 30.0;

	//float d_proj = length(v0 - camera_pos - up * dot((v0 - camera_pos), up));
	float d_proj = length(v0_cam - up_cam * dot(v0_cam , up_cam));
	float dist_threshold = floor(n * ( 1 - (d_proj / dmax)));
	if((gl_GlobalInvocationID.x % n) > dist_threshold)
	{
		return;
	}



	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	//construct the data back to a blade type
	Blade result;
	result.v0 = vec4(v0, angle);
	result.v1 = vec4(v1, height);
	result.v2 = vec4(v2, width);
	result.up = vec4(up, stiffness);


    uint index = atomicAdd(numBlades.vertexCount,1);

    //store the modified blade to output array and update vertexCount
    //culledBlades.output_blades[index] = blades.input_blades[gl_GlobalInvocationID.x];
    //when it works change to this
	blades.input_blades[gl_GlobalInvocationID.x] = result;
    culledBlades.output_blades[index] = blades.input_blades[gl_GlobalInvocationID.x];
}
