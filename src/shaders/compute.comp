#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
layout(set = 2, binding = 0) buffer InputBlades {
	  Blade bladeAt[];
} inputBlades;

layout(set = 2, binding = 1) buffer CulledBlades {
	  Blade bladeAt[];
} culledBlades;

layout(set = 2, binding = 2) buffer NumBlades {
	  uint vertexCount;   // Write the number of blades remaining here
	  uint instanceCount; // = 1
	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

vec3 windDir = normalize(vec3(2.5f, 0.f, 4.f));

float windIntensity(vec3 v) {
	float strength = sin(v.x * windDir.x + totalTime) + 
					 cos(v.z * windDir.z + totalTime) + 1.8f;
	return strength;
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	Blade currBlade = inputBlades.bladeAt[gl_GlobalInvocationID.x];

    // TODO: Apply forces on every blade and update the vertices in the buffer
	// Variables to neaten up
	vec3 v0 = currBlade.v0.xyz;
	vec3 v1 = currBlade.v1.xyz;
	vec3 v2 = currBlade.v2.xyz;
	vec3 up = currBlade.up.xyz;
	float orientation = currBlade.v0.w;
	float height =		currBlade.v1.w;
	float width =		currBlade.v2.w;
	float stiffness =	currBlade.up.w;

	// GRAVITY***
	// Environmental:
	vec3 gravDir = vec3(0.f, -1.f, 0.f);
	float accel = 9.80665;

	vec3 gE = gravDir * accel;

	// Front Gravity:
	vec3 bitangent = vec3(sin(orientation), 0.f, cos(orientation)); // Same as grass.tese
	vec3 f = cross(up, bitangent);
	vec3 gF = 0.25f * length(gE) * normalize(f);

	// Total
	vec3 g = gE + gF;


	// RECOVERY***
	vec3 iv2 = v0 + normalize(up) * height; // Up scaled by height
	vec3 rec = (iv2 - v2) * stiffness; // Difference multiplied by stiffness


	// WIND***
	vec3 wi = windDir * windIntensity(v0);
	vec3 diff = v2 - v0;

	float fd = 1.f - abs(dot(wi / length(wi), diff / length(diff)));
	float fr = dot(diff, up) / height;
	float theta = fd * fr;

	// Resulting force
	vec3 w = wi * theta;


	// TOTAL FORCE***
	vec3 tv2 = (g + rec + w) * deltaTime;
	v2 += tv2;

	// Ensure above ground
	v2 = v2 - up * min(dot(up, v2 - v0), 0.f);
	
	// Update v1
	float lProj = length(v2 - v0 - up * dot(v2 - v0, up));

	v1 = v0 + height * up * max(1.f - lProj / height, 0.05f * max(lProj / height, 1.f));

	// Length update
	float l0 = length(v2 - v0);
	float l1 = length(v1 - v0) +
			   length(v2 - v1);
	float l = (2.f * l0 + l1) / 3.f;  // Simplified since there's only two control points

	float r = height / l;

	// Final update:
	vec3 newV1 = v0 + r * (v1 - v0);
	vec3 newV2 = newV1 + r * (v2 - v1); // Think my error before was from using the newV1 for both v1s here
	inputBlades.bladeAt[gl_GlobalInvocationID.x].v1.x = newV1.x;
	inputBlades.bladeAt[gl_GlobalInvocationID.x].v1.y = newV1.y;
	inputBlades.bladeAt[gl_GlobalInvocationID.x].v1.z = newV1.z;
	
	inputBlades.bladeAt[gl_GlobalInvocationID.x].v2.x = newV2.x;
	inputBlades.bladeAt[gl_GlobalInvocationID.x].v2.y = newV2.y;
	inputBlades.bladeAt[gl_GlobalInvocationID.x].v2.z = newV2.z;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	vec4 camPos = inverse(camera.view) * vec4(0.f, 0.f, 0.f, 1.f);//-vec3(camera.view[3]);
	
	// Orientation Culling - I was going to use the camera's forward vector, 
	//						but I think that'd look weird if we're too close to the grass
	bool cullForOrientation = abs(dot(normalize(f), normalize(vec3(camPos) - v0))) >= 0.9f;
	
	// View-frustum culling
	float tolerance = 0.2f; // From paper
	vec3 m = 0.25f * v0 * 0.5f * newV1 * 0.25f * newV2; // approximate midpoint
	vec4 mNDC  = camera.proj * camera.view * vec4(m, 1.f);
	vec4 v0NDC = camera.proj * camera.view * vec4(v0, 1.f);
	vec4 v2NDC = camera.proj * camera.view * vec4(v2, 1.f);
	
	bool cullV0 = !inBounds(v0NDC.x, v0NDC.w + tolerance) || 
				  !inBounds(v0NDC.y, v0NDC.w + tolerance) || 
				  !inBounds(v0NDC.z, v0NDC.w + tolerance);
	bool cullV2 = !inBounds(v2NDC.x, v2NDC.w + tolerance) || 
			      !inBounds(v2NDC.y, v2NDC.w + tolerance) || 
			      !inBounds(v2NDC.z, v2NDC.w + tolerance);
	bool cullM  = !inBounds(mNDC.x, mNDC.w + tolerance) || 
				  !inBounds(mNDC.y, mNDC.w + tolerance) || 
				  !inBounds(mNDC.z, mNDC.w + tolerance);

	bool cullView = cullV0 && cullV2 && cullM;


	// Distance Culling
	float maxDist = 28.f;
	float currDist = length(vec3(camPos) - v0);
	bool cullDist = false;

	// Up to 28, half will get culled. After 28, all will be culled.
	// Four buckets: 0-7, 7-14 (mod 8), 14-21 (mod4), 21-28 (mod2)
	cullDist = currDist >= maxDist;
	if (!cullDist && currDist > 7.f) {
		int modDist = int(currDist) / 7;
		int modN = int(pow(2, 4 - modDist));

		cullDist = cullDist || mod(gl_GlobalInvocationID.x, modN) == 0;
	}

	
	if (!cullForOrientation && !cullView && !cullDist) {
		int totBlades = int(atomicAdd(numBlades.vertexCount, 1));
		culledBlades.bladeAt[totBlades] = inputBlades.bladeAt[gl_GlobalInvocationID.x];
	}
}
