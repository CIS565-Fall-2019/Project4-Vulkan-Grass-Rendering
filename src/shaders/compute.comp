#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer InputBlades {
	Blade blades[];
} inputBlades;
 layout(set = 2, binding = 1) buffer CulledBlades {
	Blade blades[];
} culledBlades;
layout(set = 2, binding = 2) buffer NumBlades {
	uint vertexCount; 
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
} numBlades;

bool check(vec3 pos, float bounds) {
    return (pos.x >= -bounds) && (pos.x <= bounds) &&
		(pos.y >= -bounds) && (pos.y <= bounds) && 
		(pos.z >= -bounds) && (pos.z <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	uint index = gl_GlobalInvocationID.x;
	Blade bl = inputBlades.blades[index];
 	float h = bl.v1.w;
	float w = bl.v2.w;
	float stiff = bl.up.w;
	vec3 v0 = bl.v0.xyz;
	vec3 v1 = bl.v1.xyz;
	vec3 v2 = bl.v2.xyz;
	vec3 up = bl.up.xyz;
   
   // gravity
	vec3 gE = vec3(0.0, -9.8, 0.0);
	vec3 f = normalize(cross(up, vec3(sin(bl.v0.w), 0.0, cos(bl.v0.w))));
	vec3 gF = 0.25 * 9.8 * f;
	vec3 gravity = gE + gF;


   // recovery
	vec3 recovery = (v0 + h * up - v2) * stiff;

   // wind
	vec3 wi = vec3(0.5, sin(v0.x + v0.y + totalTime), 0.5);
	float fd = 1 - abs(dot(normalize(wi), normalize(v2 - v0)));
	float fr = dot((v2 - v0), up) / h;
	vec3 wind = wi * fd * fr;
 
	v2 += (recovery + gravity + wind) * deltaTime;
	if(dot(up, v2 - v0) < 0.0) { return; }
	
	float len = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + h * up * max(1.0 - (len / h), 0.05 * max(len / h, 1.0));
	float len1 = distance(v0, v2);
	float len2 = distance(v0, v1) + distance(v1, v2);
	float len3 = (2.0 * len1 + len2) / 3.0;
	float r = h / len3;
	vec3 v1_ = v0 + r * (v1 - v0);
	vec3 v2_ = v1_ + r * (v2 - v1);
	if(dot(up, v2_ - v0) < 0.0) { return; }
 	inputBlades.blades[index].v1.xyz = v1_;
	inputBlades.blades[index].v2.xyz = v2_;

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
	vec3 cameraPos = (inverse(camera.view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;

	// ORIENTATION
	#if 1
	vec3 viewDir = cameraPos - v0;
	viewDir.y = 0;
	viewDir = normalize(viewDir);						      
	if(abs(dot(viewDir, vec3(sin(bl.v0.w), 0.0, cos(bl.v0.w)))) > 0.9)  { return; }
	#endif

	// FRUSTUM
	#if 1
	vec4 ndc_v0 = camera.proj * camera.view * vec4(v0, 1.0);
	vec4 ndc_v2 = camera.proj * camera.view * vec4(v2, 1);
	vec4 ndc_v1 = camera.proj * camera.view * vec4(0.25 * (v0 + v2) + 0.5 * v1, 1);

	if (!check(ndc_v0.xyz, ndc_v0.w + 2.0) || 
		!check(ndc_v1.xyz, ndc_v1.w + 2.0) || 
		!check(ndc_v2.xyz, ndc_v2.w + 2.0)) { return; }
	#endif

	// DISTANCE
	#if 1
	float dis = length(v0 - cameraPos - up * dot(up, v0 - cameraPos));
	if (mod(index, 15.0) > floor(15.0 * (1.0 - (dis / 50.0)) + 3.0)) { return; }
	#endif

	culledBlades.blades[atomicAdd(numBlades.vertexCount, 1)] = inputBlades.blades[index];
}
