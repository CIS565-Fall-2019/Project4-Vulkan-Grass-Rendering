#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI 3.141592653238

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer InBlades {
	Blade inBlades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
	Blade culledBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	uint threadIdx = gl_GlobalInvocationID.x;
	if (threadIdx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	// gather input
	vec3 v0 = inBlades[threadIdx].v0.xyz;
	vec3 v2 = inBlades[threadIdx].v2.xyz;
	vec3 up = inBlades[threadIdx].up.xyz;
	float orientation = inBlades[threadIdx].v0.w;
	float height = inBlades[threadIdx].v1.w;
	float width = inBlades[threadIdx].v2.w;
	float stiffness = inBlades[threadIdx].up.w;

	// ??? 
	vec3 orientationDir = normalize(vec3(cos(orientation), 0.0, sin(orientation))); // pointing along width of blade
	vec3 faceDir = normalize(cross(up, orientationDir)); // pointing out from face of blade

	// TODO: Apply forces on every blade and update the vertices in the buffer
	// gravity force
	vec3 gravityDir = vec3(0, -1, 0);
	float gravityAcc = 9.81;
	vec3 gE = normalize(gravityDir) * gravityAcc;
	vec3 f = normalize(vec3(cos(orientation), 0.0, sin(orientation)));
	vec3 gF = 0.25 * length(gE) * f;
	vec3 gravity = gE + gF;

	// recovery force
	vec3 iv2 = v0 + (height * normalize(up));
	vec3 recovery = (iv2 - v2) * stiffness;

	// wind force
	vec3 windDir = vec3(0);
	vec3 windAlignment = vec3(0);
	vec3 wind = windDir * windAlignment;

	// total force
	vec3 totalForce = gravity + recovery + wind;
	vec3 tv2 = totalForce * deltaTime;
	v2 = v2 + tv2;
	v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
	
	float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
	vec3 v1 = v0 + height * up * max(1.0 - (l_proj / height), 0.05 * max(l_proj / height, 1.0));

	float n = 1; // degree of bezier curve
	float L0 = length(v2 - v0);
	float L1 = length(v2 - v1) + length(v1 - v2);
	float L = (2.0 * L0 + (n - 1) * L1) / (n + 1.0);
	float r = height / L;

	vec3 v1_corr = v0 + r * (v1 - v0);
	vec3 v2_corr = v1_corr + r * (v2 - v1);

	inBlades[threadIdx].v1 = vec4(v1_corr, height);
	inBlades[threadIdx].v2 = vec4(v2_corr, width);

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	// orientation culling
	bool orientationCull = false;
	vec3 bladeFaceDir = normalize(vec3(cos(orientation), 0.0, sin(orientation)));
	mat4 invView = camera.view;//transpose(camera.view);
	vec3 viewDir = normalize(vec3(-invView[0][2], -invView[1][2], -invView[2][2]));

	vec4 viewDir4 = normalize(inverse(camera.view) * vec4(0, 0, -1, 0));

	orientationCull = abs(dot(faceDir, viewDir4.xyz)) < 0.9;

	// view-frustum culling
	bool frustumCull = false;

	// distance culling
	bool distanceCull = false;

	// occlusion culling
	bool occlusionCull = false;

	culledBlades[threadIdx] = inBlades[threadIdx];
	atomicAdd(numBlades.vertexCount, 1);	
}
