#version 450
#extension GL_ARB_separate_shader_objects : enable

#define PI 3.141592653238

#define ORIENTATION_CULL 1
#define FRUSTUM_CULL 1
#define DISTANCE_CULL 1

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

// DONE: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

layout(set = 2, binding = 0) buffer InBlades {
	Blade inBlades[];
};

layout(set = 2, binding = 1) buffer RemainingBlades {
	Blade remainingBlades[];
};

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
layout(set = 2, binding = 2) buffer NumBlades {
 	  uint vertexCount;   // Write the number of blades remaining here
 	  uint instanceCount; // = 1
 	  uint firstVertex;   // = 0
	  uint firstInstance; // = 0
} numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	uint threadIdx = gl_GlobalInvocationID.x;
	if (threadIdx == 0) {
		numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	// gather input
	vec3 v0 = inBlades[threadIdx].v0.xyz;
	vec3 v1 = inBlades[threadIdx].v1.xyz;
	vec3 v2 = inBlades[threadIdx].v2.xyz;
	vec3 up = inBlades[threadIdx].up.xyz;
	float orientation = inBlades[threadIdx].v0.w;
	float height = inBlades[threadIdx].v1.w;
	float width = inBlades[threadIdx].v2.w;
	float stiffness = inBlades[threadIdx].up.w;

	vec3 orientationDir = normalize(vec3(cos(orientation), 0.0, sin(orientation))); // pointing along width of blade
	vec3 faceDir = normalize(cross(up, orientationDir)); // pointing out from face of blade

	// DONE: Apply forces on every blade and update the vertices in the buffer

	// gravity force
	vec3 gravityDir = vec3(0.f, -1.f, 0.f);
	float gravityAcc = 9.81f;
	vec3 gE = gravityDir * gravityAcc;
	vec3 gF = 0.25 * length(gE) * faceDir;
	vec3 gravity = gF + gE;

	// recovery force
	vec3 iv2 = v0 + height * up;
	vec3 recovery = (iv2 - v2) * stiffness;

	// TODO: make nice wind force
	// wind force
	vec3 windCenter = vec3(cos(totalTime), 2.f, sin(totalTime));

	//vec3 windDir = 10.0 * vec3(cos(totalTime), 0.0, sin(totalTime));
	vec3 windDir = normalize(v0 - windCenter);

	float dirAlignment = 1.0 - abs(dot(windDir, normalize(v2 - v0)));
	float heightRatio = dot(v2 - v0, up) / height;
	float windAlignment = dirAlignment * heightRatio;
	vec3 wind = 10.0f * abs(sin(totalTime)) * windAlignment * windDir;
	wind = vec3(0.f);

	// apply total force
	vec3 tv2 = (gravity + recovery + wind) * 0.01;
	v2 += tv2;

	// apply correction
	v2 = v2 - up * min(dot(up, v2 - v0), 0.0);
	
	float l_proj = length(v2 - v0 - up * dot(v2 - v0, up));
	v1 = v0 + height * up * max(1.0 - (l_proj / height), 0.05 * max(l_proj / height, 1.0));

	float n = 2.0; // degree of bezier curve
	float L0 = distance(v2, v0);
	float L1 = distance(v2, v1) + distance(v1, v0);
	float L = (2.0 * L0 + (n - 1.0) * L1) / (n + 1.0);
	float r = height / L;

	vec3 v1_corr = v0 + r * (v1 - v0);
	vec3 v2_corr = v1_corr + r * (v2 - v1);

	// update values
	inBlades[threadIdx].v1 = vec4(v1_corr, height);
	inBlades[threadIdx].v2 = vec4(v2_corr, width);

	// DONE: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads

	bool cull = false;
	mat4 invView = inverse(camera.view);

#if ORIENTATION_CULL
	// orientation culling	
	vec3 viewDir = normalize(vec3(camera.view[0][2], camera.view[1][2], camera.view[2][2]));
	cull = cull || abs(dot(orientationDir, viewDir)) > 0.9;
#endif // #if ORIENTATION_CULL

#if FRUSTUM_CULL
	// view-frustum culling
	vec3 m = 0.25 * v0 + 0.5 * v1 + 0.25 * v2; // estimated midpoint of blade

	// project v0, v2, and m to NDC
	vec4 v0_NDC = camera.proj * camera.view * vec4(v0, 1.0);
	vec4 v2_NDC = camera.proj * camera.view * vec4(v2, 1.0);
	vec4 m_NDC = camera.proj * camera.view * vec4(m, 1.0);

	float t = 0.1; // tolerance
	float v0Bounds = v0_NDC.w + t;
	float v2Bounds = v2_NDC.w + t;
	float mBounds = m_NDC.w + t;
	bool v0InBounds = inBounds(v0_NDC.x, v0Bounds) && inBounds(v0_NDC.y, v0Bounds) && inBounds(v0_NDC.z, v0Bounds);
	bool v2InBounds = inBounds(v2_NDC.x, v2Bounds) && inBounds(v2_NDC.y, v2Bounds) && inBounds(v2_NDC.z, v2Bounds);
	bool mInBounds = inBounds(m_NDC.x, mBounds) && inBounds(m_NDC.y, mBounds) && inBounds(m_NDC.z, mBounds);

	// for vis/debug purposes
	//if (!v0InBounds && !v2InBounds && !mInBounds) {
	//	inBlades[threadIdx].v1 += vec4(0.0, 5.0, 0.0, 0.0);
	//}

	// cull blade if all 3 points are outside frustum
	cull = cull || (!v0InBounds && !v2InBounds && !mInBounds);

#endif // #if FRUSTUM_CULL

#if DISTANCE_CULL
	// distance culling
	vec3 cameraPos = vec3(invView[3][0], invView[3][1], invView[3][2]);
	int numBuckets = 3; // number of buckets/levels used in distance culling
	float d_max = 50.0; // max distance
	float d_proj = length(v0 - cameraPos - up * dot(v0 - cameraPos, up));
	cull = cull || (mod(threadIdx, numBuckets) > floor(numBuckets * (1.0 - d_proj / d_max)));

#endif // #if DISTANCE_CULL

	// if no culling, increment number of blades and add blade to remaining blades
	if (!cull) {
		remainingBlades[atomicAdd(numBlades.vertexCount, 1)] = inBlades[threadIdx];
	}
}
